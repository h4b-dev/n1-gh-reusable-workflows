name: Trivy Security and Quality Checks
on:
  workflow_call:
    inputs:
      container-name:
        required: true
        type: string
        description: "Name of the container to build and scan"
      dockerfile-path:
        required: true
        type: string
        description: "Path to the Dockerfile"
      env-name:
        required: false
        type: string
        description: "Environment name of the github"

jobs:
  security-scan:
    name: Scan container with Trivy
    runs-on: ubuntu-latest
    environment: ${{ inputs.env-name || null }}
    env:
      VULNERABILITIES_RESULT: trivy-scan-results-vuln-${{ inputs.container-name }}-${{ github.sha }}.txt
      SECRETS_RESULT: trivy-scan-results-secret-${{ inputs.container-name }}-${{ github.sha }}.txt
      TRIVY_SCAN_RESULT: trivy-scan-results-${{ inputs.container-name }}-${{ github.sha }}.txt
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Trivy vulnerability database
        uses: actions/cache@v3
        with:
          path: .trivy
          key: trivy-cache-${{ runner.os }}-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            trivy-cache-${{ runner.os }}-

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2
            
      - name: Build the Docker image
        run: |
          BUILD_ARGS=""
          if [ -n "${{ secrets.NUGET_USER_NAME }}" ]; then
            BUILD_ARGS="$BUILD_ARGS --build-arg NUGET_USER_NAME=${{ secrets.NUGET_USER_NAME }}"
          fi
          if [ -n "${{ secrets.NUGET_USER_PASS }}" ]; then
            BUILD_ARGS="$BUILD_ARGS --build-arg NUGET_AUTH_PASS=${{ secrets.NUGET_USER_PASS }}"
          fi
          docker build $BUILD_ARGS -t ${{ inputs.container-name }}:${{ github.sha }} -f ${{ inputs.dockerfile-path }} .

      - name: Run Trivy vulnerability scanner (container)
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: ${{ inputs.container-name }}:${{ github.sha }}
          format: 'table'
          output: ${{ env.VULNERABILITIES_RESULT }}
          exit-code: '0'
          ignore-unfixed: true
          cache-dir: .trivy

      - name: Run Trivy secret scanner (repository code)
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          scan-type: 'fs'
          format: 'table'
          output: ${{ env.SECRETS_RESULT }}
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          security-checks: 'secret'
          cache-dir: .trivy

      - name: Check vulnerability scan results
        if: always()
        run: |
          if [ ! -s ${{ env.VULNERABILITIES_RESULT }} ] || [ $(cat ${{ env.VULNERABILITIES_RESULT }} | wc -l) -le 1 ]; then
            echo "✅ No vulnerabilities found in dependency scan" > ${{ env.VULNERABILITIES_RESULT }}
          fi

      - name: Check secrets scan results
        if: always()
        run: |
          if [ ! -s ${{ env.SECRETS_RESULT }} ] || [ $(cat ${{ env.SECRETS_RESULT }} | wc -l) -le 1 ]; then
            echo "✅ No secrets or vulnerabilities found in package scan" > ${{ env.SECRETS_RESULT }}
          fi

      - name: Combine scan results
        if: always() 
        run: |
          echo "=== Scan Summary ===" > ${{ env.TRIVY_SCAN_RESULT }}
          echo "Scan Date: $(date)" >> ${{ env.TRIVY_SCAN_RESULT }}
          echo "Repository: ${{ github.repository }}" >> ${{ env.TRIVY_SCAN_RESULT }}
          echo "Branch: ${{ github.ref }}" >> ${{ env.TRIVY_SCAN_RESULT }}
          echo "Commit: ${{ github.sha }}" >> ${{ env.TRIVY_SCAN_RESULT }}
          echo "=== Dependency Scan Results ===" >> ${{ env.TRIVY_SCAN_RESULT }}
          cat ${{ env.VULNERABILITIES_RESULT }} > ${{ env.TRIVY_SCAN_RESULT }}
          echo "" >> ${{ env.TRIVY_SCAN_RESULT }}
          echo "=== Security Scan Results ===" >> ${{ env.TRIVY_SCAN_RESULT }}
          cat ${{ env.SECRETS_RESULT }} >> ${{ env.TRIVY_SCAN_RESULT }}

      - name: Check for critical vulnerabilities
        if: always()
        run: |
          # Busca la línea con el total de vulnerabilidades críticas y verifica si el número es mayor que 0
          CRITICAL_COUNT=$(grep -E "CRITICAL: [1-9][0-9]*" ${{ env.TRIVY_SCAN_RESULT }} | wc -l)
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "❌ Se encontraron vulnerabilidades críticas."
            exit 1
          else
            echo "✅ No critical vulnerabilities found."
          fi
    
      - name: Upload Trivy scan results as artifact
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: trivy-scan-results-${{ inputs.container-name }}-${{ github.sha }}
          path: ${{ env.TRIVY_SCAN_RESULT }}