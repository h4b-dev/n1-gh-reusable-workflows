name: Trivy NodeJS Bun Scan Reusable Workflow

on:
  workflow_call:
    inputs:
      node-version:
        description: "Node.js version to use"
        type: string
        required: true
        default: "18"
      scan-path:
        description: "Directory to scan"
        type: string
        required: true
        default: "."

jobs:
  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      VULNERABILITIES_RESULT: trivy-scan-results-vuln-${{ github.sha }}.txt
      SECRETS_RESULT: trivy-scan-results-secret-${{ github.sha }}.txt
      TRIVY_SCAN_RESULT: trivy-scan-results-${{ github.sha }}.txt
      BUN_AUDIT_RESULT: bun-audit-${{ github.sha }}.json

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs['node-version'] }}

      - name: Set up bun
        uses: oven-sh/setup-bun@v2

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Initialize result files
        run: |
          echo "=== Vulnerability Scan Results ===" > ${{ env.VULNERABILITIES_RESULT }}
          echo "=== Secrets Scan Results ===" > ${{ env.SECRETS_RESULT }}

      - name: Run bun audit
        if: always()
        run: |
          bun bun.lockb > yarn.lock && yarn audit --json > ${{ env.BUN_AUDIT_RESULT }} || true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        id: vuln-scan
        with:
          scan-type: "fs"
          scan-ref: ${{ inputs['scan-path'] }}
          format: "table"
          exit-code: "0"
          ignore-unfixed: true
          severity: "CRITICAL,HIGH"
          vuln-type: "library"
          output: ${{ env.VULNERABILITIES_RESULT }}
          list-all-pkgs: true

      - name: Check vulnerability scan results
        if: always()
        run: |
          if [ ! -s ${{ env.VULNERABILITIES_RESULT }} ] || [ $(cat ${{ env.VULNERABILITIES_RESULT }} | wc -l) -le 1 ]; then
            echo "✅ No vulnerabilities found in dependency scan" > ${{ env.VULNERABILITIES_RESULT }}
          fi

      - name: Check secrets scan results
        if: always()
        run: |
          if [ ! -s ${{ env.SECRETS_RESULT }} ] || [ $(cat ${{ env.SECRETS_RESULT }} | wc -l) -le 1 ]; then
            echo "✅ No secrets or vulnerabilities found in package scan" > ${{ env.SECRETS_RESULT }}
          fi

      - name: Combine scan results
        if: always()
        run: |
          echo "=== Scan Summary ===" > ${{ env.TRIVY_SCAN_RESULT }}
          echo "Scan Date: $(date)" >> ${{ env.TRIVY_SCAN_RESULT }}
          echo "Repository: ${{ github.repository }}" >> ${{ env.TRIVY_SCAN_RESULT }}
          echo "Branch: ${{ github.ref }}" >> ${{ env.TRIVY_SCAN_RESULT }}
          echo "Commit: ${{ github.sha }}" >> ${{ env.TRIVY_SCAN_RESULT }}
          echo "" >> ${{ env.TRIVY_SCAN_RESULT }}
          echo "=== Bun Audit Results ===" >> ${{ env.TRIVY_SCAN_RESULT }}
          cat ${{ env.BUN_AUDIT_RESULT }} >> ${{ env.TRIVY_SCAN_RESULT }}
          echo "" >> ${{ env.TRIVY_SCAN_RESULT }}
          echo "=== Dependency Scan Results ===" >> ${{ env.TRIVY_SCAN_RESULT }}
          cat ${{ env.VULNERABILITIES_RESULT }} >> ${{ env.TRIVY_SCAN_RESULT }}
          echo "" >> ${{ env.TRIVY_SCAN_RESULT }}
          echo "=== Security Scan Results ===" >> ${{ env.TRIVY_SCAN_RESULT }}
          cat ${{ env.SECRETS_RESULT }} >> ${{ env.TRIVY_SCAN_RESULT }}

      - name: Check for critical vulnerabilities
        if: always()
        run: |
          if grep -q "CRITICAL" ${{ env.TRIVY_SCAN_RESULT }}; then
            echo "❌ Se encontraron vulnerabilidades críticas"
            exit 1
          fi

      - name: Upload Trivy scan results as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-scan-results-${{ github.sha }}
          path: |
            ${{ env.TRIVY_SCAN_RESULT }}
            ${{ env.BUN_AUDIT_RESULT }}
