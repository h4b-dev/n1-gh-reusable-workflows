name: SonarCloud Quality Code Analysis
on:
  workflow_call:
    inputs:
      sonar-project-key:
        required: true
        type: string
        description: "SonarCloud project key"
      sonar-organization:
        required: true
        type: string
        description: "SonarCloud organization"
      test-project-path:
        required: true
        type: string
        description: "Path to the test project"
      app-settings-file:
        required: false
        type: string
        description: "Path to the app settings file"
      app-settings-content:
        required: false
        type: string
        description: "App settings content"
      env-name:
        required: true
        type: string
        description: "Environment name"
      build-path:
        required: false
        type: string
        description: "Path to build project"
        default: "."
      use-nuget-config:
        required: false
        type: boolean
        description: "Used for run step setup-dotnet with custom nuget"
        default: false
      dotnet-version:
        required: false
        type: string
        description: "Version of dotnet to setup"
        default: "7.0.x"
      env-variables:
        required: false
        type: string
        description: "Environment variables map. Format: VARIABLE_NAME=value,VARIABLE_NAME=secret:SECRET_NAME"
jobs:
  sonarcloud-analysis:
    runs-on: ubuntu-latest
    environment: ${{ inputs.env-name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: bash
        run: |
          mkdir -p ./.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

      - name: Decode and create settings file
        if: inputs.app-settings-file != '' && inputs.app-settings-content != ''
        shell: bash
        env:
          SETTINGS_CONTENT: ${{ inputs.app-settings-content }}
        run: |
          # Create temporary file for decoded content
          TEMP_FILE=$(mktemp)
          
          # Decode content and ensure proper JSON formatting
          echo "$SETTINGS_CONTENT" | base64 --decode | tr -d '\r' > "$TEMP_FILE"
          
          # Verify if the content is valid JSON
          if ! jq empty "$TEMP_FILE" 2>/dev/null; then
            echo "Error: Invalid JSON content detected"
            cat "$TEMP_FILE"
            exit 1
          fi
          
          # If valid, move to final destination
          mv "$TEMP_FILE" "${{ inputs.app-settings-file }}"
      
      - name: Parse and set environment variables
        if: inputs.env-variables != ''
        run: |
          # Create JSON with all secrets
          echo '${{ toJSON(secrets) }}' > all_secrets.json
          # Create function to get secret value from JSON
          get_secret_value() {
            local secret_name=$1
            value=$(jq -r ".[\"$secret_name\"]" all_secrets.json)
            if [ "$value" = "null" ]; then
              echo ""
            else
              echo "$value"
            fi
          }
          # Remove line breaks in the input of variables
          sanitized_env_variables=$(echo '${{ inputs.env-variables }}' | tr -d '\n')
          IFS=',' read -ra MAPPINGS <<< "$sanitized_env_variables"
          for mapping in "${MAPPINGS[@]}"; do
            # Split the mapping into the new variable and the value part
            new_var="${mapping%%=*}"
            source_or_value="${mapping#*=}"
            # Remove double quotes from the value
            source_or_value=$(echo "$source_or_value" | tr -d '"')
            echo "New var: $new_var and source or value: $source_or_value"
      
            # Check if the value contains 'secret:'
            if [[ "$source_or_value" == secret:* ]]; then
              # Remove 'secret:' to get the secret name
              secret_name="${source_or_value#secret:}"
              echo "Looking for secret: $secret_name"
              # Get the secret value from the JSON
              secret_value=$(get_secret_value "$secret_name")
              if [ ! -z "$secret_value" ]; then
                echo "$new_var=$secret_value" >> $GITHUB_ENV
                echo "✅ Set $new_var from secret $secret_name"
              else
                echo "Warning: Secret $secret_name not found"
              fi
            else
              # If it doesn't contain 'secret:', assign the value directly
              echo "$new_var=$source_or_value" >> $GITHUB_ENV
              echo "✅ Set $new_var with direct value"
            fi
          done
          
          # Remove the file all_secrets.json used previously
          rm -f all_secrets.json

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        if: inputs.use-nuget-config == true
        with:
          dotnet-version: ${{ inputs.dotnet-version }}
          source-url: https://nuget.pkg.github.com/h4b-dev/index.json
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.NUGET_API_KEY }}

      - name: Build and test with coverage
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: bash
        run: |
          cd ${{ inputs.build-path }}
          mkdir -p $GITHUB_WORKSPACE/${{ inputs.test-project-path }}/
          
          $GITHUB_WORKSPACE/.sonar/scanner/dotnet-sonarscanner begin /k:"${{ inputs.sonar-project-key }}" /o:"${{ inputs.sonar-organization }}" \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.cs.opencover.reportsPaths="$GITHUB_WORKSPACE/${{ inputs.test-project-path }}/coverage.opencover.xml" \
            /d:sonar.cs.vstest.reportsPaths="TestResults/*.trx" \
            /d:sonar.security.injection="true" \
            /d:sonar.javascript.file.suffixes=".js,.jsx,.mjs,.ts,.tsx" \
            /d:sonar.csharp.file.suffixes=".cs,.cshtml"
          
          dotnet build
          
          dotnet test $GITHUB_WORKSPACE/${{ inputs.test-project-path }} --configuration Release /p:CollectCoverage=true \
            /p:CoverletOutput=$GITHUB_WORKSPACE/${{ inputs.test-project-path }}/coverage.opencover.xml \
            /p:CoverletOutputFormat=opencover \
            /p:CopyLocalLockFileAssemblies=true --logger trx --results-directory ./TestResults
          
          $GITHUB_WORKSPACE/.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-and-test-results
          path: |
            TestResults
            ${{ github.workspace }}/${{ inputs.test-project-path }}/coverage.opencover.xml