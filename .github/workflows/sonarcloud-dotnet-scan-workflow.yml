name: SonarCloud Quality Code Analysis
on:
  workflow_call:
    inputs:
      sonar-project-key:
        required: true
        type: string
        description: "SonarCloud project key"
      sonar-organization:
        required: true
        type: string
        description: "SonarCloud organization"
      test-project-path:
        required: true
        type: string
        description: "Path to the test project"
      app-settings-file:
        required: false
        type: string
        description: "Path to the app settings file"
      app-settings-content:
        required: true
        type: string
        description: "App settings content"
      env-name:
        required: true
        type: string
        description: "Environment name"
      build-path:
        required: false
        type: string
        description: "Path to build project"
        default: "."
      use-nuget-config:
        required: false
        type: boolean
        description: "Used for run step setup-dotnet with custom nuget"
        default: false
      dotnet-version:
        required: false
        type: string
        description: "Version of dotnet to setup"
        default: "7.0.x"
jobs:
  sonarcloud-analysis:
    runs-on: ubuntu-latest
    environment: ${{ inputs.env-name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: bash
        run: |
          mkdir -p ./.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

      - name: Decode and create settings file
        run: |
          # Decode the app settings content and write it to the app settings file
          echo "${{ inputs.app-settings-content }}" | base64 -d > ${{ inputs.app-settings-file }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        if: inputs.use-nuget-config == true
        with:
          dotnet-version: ${{ inputs.dotnet-version }}
          source-url: https://nuget.pkg.github.com/h4b-dev/index.json
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.NUGET_API_KEY }}

      - name: Build and test with coverage
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: bash
        run: |
          cd ${{ inputs.build-path }}
          mkdir -p $GITHUB_WORKSPACE/${{ inputs.test-project-path }}/
          
          $GITHUB_WORKSPACE/.sonar/scanner/dotnet-sonarscanner begin /k:"${{ inputs.sonar-project-key }}" /o:"${{ inputs.sonar-organization }}" \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.cs.opencover.reportsPaths="$GITHUB_WORKSPACE/${{ inputs.test-project-path }}/coverage.opencover.xml" \
            /d:sonar.cs.vstest.reportsPaths="TestResults/*.trx" \
            /d:sonar.security.injection="true" \
            /d:sonar.javascript.file.suffixes=".js,.jsx,.mjs,.ts,.tsx" \
            /d:sonar.csharp.file.suffixes=".cs,.cshtml"
          
          dotnet build
          
          dotnet test $GITHUB_WORKSPACE/${{ inputs.test-project-path }} --configuration Release /p:CollectCoverage=true \
            /p:CoverletOutput=$GITHUB_WORKSPACE/${{ inputs.test-project-path }}/coverage.opencover.xml \
            /p:CoverletOutputFormat=opencover \
            /p:CopyLocalLockFileAssemblies=true --logger trx --results-directory ./TestResults
          
          $GITHUB_WORKSPACE/.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-and-test-results
          path: |
            TestResults
            ${{ github.workspace }}/${{ inputs.test-project-path }}/coverage.opencover.xml